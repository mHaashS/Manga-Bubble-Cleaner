#!/usr/bin/env python3
"""
Lanceur de l'interface graphique Bubble Cleaner
"""

# Patch de compatibilit√© pour Pillow >= 10.0 (DOIT √™tre au tout d√©but)
import pil_patch

import os
import sys
from pathlib import Path
import tkinter as tk
from tkinter import messagebox

def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont install√©es"""
    missing_deps = []
    
    try:
        import torch
        print("‚úÖ PyTorch install√©")
    except ImportError:
        missing_deps.append("torch")
    
    try:
        import cv2
        print("‚úÖ OpenCV install√©")
    except ImportError:
        missing_deps.append("opencv-python")
    
    try:
        import easyocr
        print("‚úÖ EasyOCR install√©")
    except ImportError:
        missing_deps.append("easyocr")
    
    try:
        import openai
        print("‚úÖ OpenAI install√©")
    except ImportError:
        missing_deps.append("openai")
    
    try:
        from PIL import Image, ImageDraw, ImageFont
        print("‚úÖ Pillow install√©")
    except ImportError:
        missing_deps.append("Pillow")
    
    if missing_deps:
        print(f"‚ùå D√©pendances manquantes: {', '.join(missing_deps)}")
        print("üí° Installez-les avec: pip install -r requirements.txt")
        return False
    
    return True

def check_api_key():
    """V√©rifie la pr√©sence de la cl√© API OpenAI"""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        # Essayer de charger depuis .env
        env_file = Path(".env")
        if env_file.exists():
            try:
                with open(env_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            os.environ[key.strip()] = value.strip()
                api_key = os.getenv("OPENAI_API_KEY")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors du chargement de .env: {e}")
    
    if not api_key:
        print("‚ö†Ô∏è Cl√© API OpenAI non trouv√©e")
        print("üí° Cr√©ez un fichier .env avec votre cl√© API:")
        print("   OPENAI_API_KEY=votre_cl√©_api")
        return False
    
    print("‚úÖ Cl√© API OpenAI trouv√©e")
    return True

def check_models():
    """V√©rifie la pr√©sence des mod√®les n√©cessaires"""
    models_dir = Path("models")
    if not models_dir.exists():
        print("‚ö†Ô∏è Dossier 'models' non trouv√©")
        print("üí° Assurez-vous que les mod√®les sont t√©l√©charg√©s")
        return False
    
    # V√©rifier la pr√©sence d'au moins un fichier de mod√®le
    model_files = list(models_dir.glob("*.pth")) + list(models_dir.glob("*.pkl"))
    if not model_files:
        print("‚ö†Ô∏è Aucun fichier de mod√®le trouv√© dans le dossier 'models'")
        print("üí° T√©l√©chargez les mod√®les n√©cessaires")
        return False
    
    print("‚úÖ Mod√®les trouv√©s")
    return True

def main():
    """Fonction principale"""
    print("üé® Bubble Cleaner - Lancement de l'interface graphique")
    print("=" * 50)
    
    # V√©rifications pr√©liminaires
    if not check_dependencies():
        print("\n‚ùå Impossible de lancer l'application")
        return
    
    if not check_api_key():
        print("\n‚ö†Ô∏è L'application peut √™tre lanc√©e mais la traduction ne fonctionnera pas")
    
    if not check_models():
        print("\n‚ö†Ô∏è L'application peut √™tre lanc√©e mais la d√©tection ne fonctionnera pas")
    
    print("\nüöÄ Lancement de l'interface graphique...")
    
    try:
        # Importer et lancer l'application GUI
        from gui_app import main as gui_main
        gui_main()
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("üí° Assurez-vous que gui_app.py est pr√©sent dans le r√©pertoire")
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")

if __name__ == "__main__":
    main() 