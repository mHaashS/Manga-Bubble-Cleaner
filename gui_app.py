# Patch de compatibilit√© pour Pillow >= 10.0 (DOIT √™tre au tout d√©but)
import pil_patch

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
from tkinterdnd2 import DND_FILES, TkinterDnD
import threading
import os
import sys
from pathlib import Path
import json
import queue
import time
import logging
import io
import shutil
import tempfile
import cv2
import numpy as np

# Ajouter le r√©pertoire scripts au path pour les imports
sys.path.append(str(Path(__file__).parent / "scripts"))

# √âditeur de bulles temporairement d√©sactiv√©
EDITEUR_BULLES_AVAILABLE = False

class BubbleCleanerGUI:
    def __init__(self, root):
        print("üîß Initialisation de BubbleCleanerGUI...")
        self.root = root
        self.root.title("üé® Bubble Cleaner - Interface Graphique")
        self.root.geometry("800x820")
        self.root.resizable(True, True)
        
        print("üîß Configuration de base...")
        # Configuration
        self.config_file = Path("config_gui.json")
        self.current_image = None
        self.current_folder = None
        self.output_dir = Path("output")
        self.verbose = False
        self.current_theme = "light"
        # self.edited_bulles = None  # Stockage des bulles modifi√©es par l'√©diteur (d√©sactiv√©)
        
        print("üîß D√©finition des th√®mes...")
        # D√©finition des th√®mes
        self.themes = {
            "light": {
                "bg": "#f0f0f0",
                "fg": "#2c2c2c",
                "button_bg": "#e1e1e1",
                "button_fg": "#2c2c2c",
                "entry_bg": "#ffffff",
                "entry_fg": "#2c2c2c",
                "text_bg": "#ffffff",
                "text_fg": "#2c2c2c",
                "frame_bg": "#f8f8f8",
                "accent": "#0078d4"
            },
            "dark": {
                "bg": "#2d2d30",
                "fg": "#ffffff",
                "button_bg": "#3e3e42",
                "button_fg": "#ffffff",
                "entry_bg": "#1e1e1e",
                "entry_fg": "#ffffff",
                "text_bg": "#1e1e1e",
                "text_fg": "#ffffff",
                "frame_bg": "#252526",
                "accent": "#0078d4"
            }
        }
        
        print("üîß Configuration du logging...")
        # Queue pour la communication entre threads
        self.log_queue = queue.Queue()
        
        # Configuration du logging pour rediriger vers l'interface
        self.setup_logging()
        
        print("üîß Chargement de la configuration...")
        # Charger la configuration
        self.load_config()
        
        print("üîß Application du th√®me...")
        # Appliquer le th√®me
        self.apply_theme()
        
        print("üîß Cr√©ation des widgets...")
        # Cr√©er l'interface
        self.create_widgets()
        
        print("üîß D√©marrage du thread de log...")
        # D√©marrer le thread de log
        self.start_log_thread()
        
        print("üîß Chargement des variables d'environnement...")
        # Charger les variables d'environnement
        self.load_env_file()
        
        print("üîß Initialisation du processeur par lots...")
        # Initialiser le processeur par lots
        self.init_batch_processor()
        
        print("üîß Configuration du drag and drop...")
        # Configurer le drag and drop (apr√®s cr√©ation des widgets)
        self.setup_drag_drop()
    
    def setup_drag_drop(self):
        """Configure le drag and drop pour l'interface"""
        # Bind les √©v√©nements de drag and drop sur la fen√™tre principale
        self.root.drop_target_register(DND_FILES)
        self.root.dnd_bind('<<Drop>>', self.handle_drop)
        
        # Bind sur les champs de saisie
        self.image_entry.drop_target_register(DND_FILES)
        self.image_entry.dnd_bind('<<Drop>>', self.handle_image_drop)
        
        self.folder_entry.drop_target_register(DND_FILES)
        self.folder_entry.dnd_bind('<<Drop>>', self.handle_folder_drop)
    
    def handle_drop(self, event):
        """G√®re le drop de fichiers sur la fen√™tre principale"""
        files = event.data.split()
        if not files:
            return
        
        # Traiter chaque fichier
        for file_path in files:
            file_path = file_path.strip('{}')  # Enlever les accolades Windows
            path = Path(file_path)
            
            if path.is_file():
                self.handle_single_file_drop(path)
            elif path.is_dir():
                self.handle_folder_path_drop(path)
    
    def handle_single_file_drop(self, file_path):
        """G√®re le drop d'un fichier unique"""
        if self.is_valid_image(file_path):
            self.current_image = file_path
            self.current_folder = None
            self.image_var.set(str(file_path))
            self.folder_var.set("")
            self.log_message(f"‚úÖ Image d√©pos√©e: {file_path.name}")
            self.save_config()
        else:
            self.log_message(f"‚ùå Format non support√©: {file_path.name}")
    
    def handle_folder_path_drop(self, folder_path):
        """G√®re le drop d'un dossier (appel√© avec un chemin Path)"""
        # V√©rifier s'il contient des images
        image_files = self.get_image_files_from_folder(folder_path)
        if image_files:
            self.current_folder = folder_path
            self.current_image = None
            self.folder_var.set(str(folder_path))
            self.image_var.set("")
            self.log_message(f"‚úÖ Dossier d√©pos√©: {folder_path.name} ({len(image_files)} images)")
            self.save_config()
        else:
            self.log_message(f"‚ùå Aucune image trouv√©e dans: {folder_path.name}")
    
    def handle_image_drop(self, event):
        """G√®re le drop sur le champ Image"""
        files = event.data.split()
        if files:
            file_path = Path(files[0].strip('{}'))
            if self.is_valid_image(file_path):
                self.current_image = file_path
                self.current_folder = None
                self.image_var.set(str(file_path))
                self.folder_var.set("")
                self.log_message(f"‚úÖ Image d√©pos√©e: {file_path.name}")
                self.save_config()
            else:
                self.log_message(f"‚ùå Format non support√©: {file_path.name}")
    
    def handle_folder_drop(self, event):
        """G√®re le drop sur le champ Dossier"""
        files = event.data.split()
        if files:
            folder_path = Path(files[0].strip('{}'))
            if folder_path.is_dir():
                image_files = self.get_image_files_from_folder(folder_path)
                if image_files:
                    self.current_folder = folder_path
                    self.current_image = None
                    self.folder_var.set(str(folder_path))
                    self.image_var.set("")
                    self.log_message(f"‚úÖ Dossier d√©pos√©: {folder_path.name} ({len(image_files)} images)")
                    self.save_config()
                else:
                    self.log_message(f"‚ùå Aucune image trouv√©e dans: {folder_path.name}")
            else:
                self.log_message(f"‚ùå Ce n'est pas un dossier valide: {folder_path.name}")
    
    def is_valid_image(self, file_path):
        """V√©rifie si le fichier est une image valide"""
        valid_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.gif'}
        return file_path.suffix.lower() in valid_extensions
    
    def get_image_files_from_folder(self, folder_path):
        """R√©cup√®re la liste des fichiers d'images dans un dossier"""
        if not folder_path or not folder_path.exists():
            return []
        image_extensions = {'.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif'}
        image_files = []
        for file_path in folder_path.iterdir():
            if file_path.is_file() and file_path.suffix.lower() in image_extensions:
                image_files.append(file_path)
        return image_files
    
    def init_batch_processor(self):
        """Initialise le processeur par lots"""
        try:
            self.log_message("Initialisation du processeur par lots...")
            from scripts.batch_processor import BatchProcessor
            
            self.batch_processor = BatchProcessor(
                progress_callback=self.update_batch_progress,
                status_callback=self.update_batch_status,
                error_callback=self.handle_batch_error
            )
            self.batch_mode = True
            self.log_message("Processeur par lots initialise avec succes")
        except ImportError as e:
            self.log_message(f"Mode traitement par lots non disponible: {e}")
            self.batch_mode = False
        except Exception as e:
            self.log_message(f"Erreur lors de l'initialisation du processeur par lots: {e}")
            self.batch_mode = False
    
    def setup_logging(self):
        """Configure le logging pour rediriger vers l'interface GUI"""
        try:
            # Cr√©er un handler personnalis√© pour rediriger vers l'interface
            class GUILogHandler(logging.Handler):
                def __init__(self, gui_instance):
                    super().__init__()
                    self.gui = gui_instance
                def emit(self, record):
                    try:
                        msg = self.format(record)
                        self.gui.log_queue.put(msg)
                    except Exception as e:
                        print(f"Erreur dans GUILogHandler: {e}")
            # Configurer le logging
            logging.basicConfig(
                level=logging.INFO,
                format='[%(asctime)s] %(levelname)s: %(message)s',
                datefmt='%H:%M:%S'
            )
            # Ajouter notre handler personnalis√©
            gui_handler = GUILogHandler(self)
            gui_handler.setFormatter(logging.Formatter('[%(asctime)s] %(levelname)s: %(message)s', '%H:%M:%S'))
            logging.getLogger().addHandler(gui_handler)
            print("‚úÖ Logging configur√© avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur lors de la configuration du logging: {e}")
            # Continuer sans redirection si √ßa √©choue
    
    def write(self, text):
        """Redirige stdout/stderr vers l'interface GUI"""
        if text.strip():  # Ignorer les lignes vides
            self.log_queue.put(text.rstrip())
    
    def flush(self):
        """M√©thode flush pour la redirection stdout/stderr"""
        pass
    
    def restore_stdout(self):
        """Restaure stdout et stderr"""
        sys.stdout = self.original_stdout
        sys.stderr = self.original_stderr
    
    def load_env_file(self):
        """Charge les variables d'environnement depuis le fichier .env"""
        env_file = Path(".env")
        if env_file.exists():
            try:
                with open(env_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            os.environ[key.strip()] = value.strip()
                self.log_message("‚úÖ Variables d'environnement charg√©es depuis .env")
            except Exception as e:
                self.log_message(f"‚ö†Ô∏è Erreur lors du chargement de .env: {e}")
    
    def load_config(self):
        """Charge la configuration depuis le fichier JSON"""
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    self.output_dir = Path(config.get('output_dir', 'output'))
                    self.verbose = config.get('verbose', False)
                    self.current_theme = config.get('theme', 'light')
                    if config.get('current_image'):
                        self.current_image = Path(config['current_image'])
                    if config.get('current_folder'):
                        self.current_folder = Path(config['current_folder'])
            except Exception as e:
                self.log_message(f"‚ö†Ô∏è Erreur lors du chargement de la configuration: {e}")
    
    def save_config(self):
        """Sauvegarde la configuration dans le fichier JSON"""
        config = {
            'output_dir': str(self.output_dir),
            'verbose': self.verbose,
            'theme': self.current_theme,
            'current_image': str(self.current_image) if self.current_image else None,
            'current_folder': str(self.current_folder) if self.current_folder else None
        }
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è Erreur lors de la sauvegarde de la configuration: {e}")
    
    def apply_theme(self):
        """Applique le th√®me actuel √† l'interface"""
        theme = self.themes[self.current_theme]
        
        # Configuration du style ttk
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configuration des couleurs pour ttk
        style.configure("TFrame", background=theme["frame_bg"])
        style.configure("TLabel", background=theme["frame_bg"], foreground=theme["fg"])
        style.configure("TButton", 
                      background=theme["button_bg"], 
                      foreground=theme["button_fg"],
                      borderwidth=1,
                      focuscolor=theme["accent"])
        style.configure("TEntry", 
                      fieldbackground=theme["entry_bg"],
                      foreground=theme["entry_fg"],
                      borderwidth=1)
        style.configure("TCheckbutton", 
                      background=theme["frame_bg"],
                      foreground=theme["fg"])
        style.configure("TLabelframe", 
                      background=theme["frame_bg"],
                      foreground=theme["fg"])
        style.configure("TLabelframe.Label", 
                      background=theme["frame_bg"],
                      foreground=theme["fg"])
        
        # Configuration de la fen√™tre principale
        self.root.configure(bg=theme["bg"])
        
        # Configuration de la zone de texte
        if hasattr(self, 'log_text'):
            self.log_text.configure(
                bg=theme["text_bg"],
                fg=theme["text_fg"],
                insertbackground=theme["fg"],
                selectbackground=theme["accent"],
                selectforeground=theme["text_bg"]
            )
    
    def toggle_theme(self):
        """Bascule entre le th√®me clair et sombre"""
        self.current_theme = "dark" if self.current_theme == "light" else "light"
        self.apply_theme()
        self.save_config()
        
        # Mettre √† jour l'affichage du bouton
        if hasattr(self, 'theme_button'):
            theme_icon = "üåô" if self.current_theme == "light" else "‚òÄÔ∏è"
            self.theme_button.configure(text=f"{theme_icon}")
        
        logging.info(f"üé® Th√®me chang√© vers: {self.current_theme}")
    
    def create_widgets(self):
        """Cr√©e l'interface graphique"""
        # Appliquer les styles personnalis√©s avant toute cr√©ation de widget
        self.setup_styles()
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.N, tk.S, tk.E, tk.W))
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        
        # Header en haut (titre parfaitement centr√© + bouton th√®me √† droite)
        header_frame = ttk.Frame(main_frame)
        header_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 30))
        header_frame.columnconfigure(0, weight=0)
        header_frame.columnconfigure(1, weight=1)
        header_frame.columnconfigure(2, weight=0)
        
        # Titre centr√©
        title_label = ttk.Label(header_frame, text="üé® Bubble Cleaner", font=('Arial', 18, 'bold'))
        title_label.grid(row=0, column=1, sticky='ew', padx=(0, 0))
        
        # Bouton th√®me √† droite
        theme_icon = "üåô" if self.current_theme == "light" else "‚òÄÔ∏è"
        self.theme_button = ttk.Button(header_frame, text=theme_icon, width=4, command=self.toggle_theme)
        self.theme_button.grid(row=0, column=2, sticky=tk.E, padx=(20, 0))
        
        # Section S√©lection
        selection_frame = ttk.LabelFrame(main_frame, text="üìÅ S√©lection des fichiers", padding="15")
        selection_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 20))
        selection_frame.columnconfigure(1, weight=1)
        
        # Zone de drop visuelle
        drop_zone_frame = ttk.Frame(selection_frame)
        drop_zone_frame.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        drop_zone_frame.columnconfigure(0, weight=1)
        
        drop_label = ttk.Label(drop_zone_frame, 
                              text="üñ±Ô∏è Glissez-d√©posez vos images ou dossiers ici", 
                              font=('Arial', 10, 'italic'), foreground='#666666')
        drop_label.grid(row=0, column=0, pady=5)
        
        # Configurer le drag and drop sur la zone
        drop_zone_frame.drop_target_register(DND_FILES)
        drop_zone_frame.dnd_bind('<<Drop>>', self.handle_drop)
        
        # S√©parateur
        separator = ttk.Separator(selection_frame, orient='horizontal')
        separator.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=10)
        
        # S√©lection d'image
        ttk.Label(selection_frame, text="Image:", font=('Arial', 10, 'bold')).grid(row=2, column=0, sticky=tk.W, padx=(0, 15), pady=(0, 10))
        self.image_var = tk.StringVar()
        self.image_entry = ttk.Entry(selection_frame, textvariable=self.image_var, state='readonly')
        self.image_entry.grid(row=2, column=1, sticky=(tk.W, tk.E), padx=(0, 15), pady=(0, 10))
        select_image_btn = ttk.Button(selection_frame, text="üì∏ S√©lectionner", command=self.select_image, width=15)
        select_image_btn.grid(row=2, column=2, pady=(0, 10))
        
        # S√©lection de dossier
        ttk.Label(selection_frame, text="Dossier:", font=('Arial', 10, 'bold')).grid(row=3, column=0, sticky=tk.W, padx=(0, 15), pady=(0, 10))
        self.folder_var = tk.StringVar()
        self.folder_entry = ttk.Entry(selection_frame, textvariable=self.folder_var, state='readonly')
        self.folder_entry.grid(row=3, column=1, sticky=(tk.W, tk.E), padx=(0, 15), pady=(0, 10))
        select_folder_btn = ttk.Button(selection_frame, text="üìÇ S√©lectionner", command=self.select_folder, width=15)
        select_folder_btn.grid(row=3, column=2, pady=(0, 10))
        
        # Dossier de sortie
        ttk.Label(selection_frame, text="Sortie:", font=('Arial', 10, 'bold')).grid(row=4, column=0, sticky=tk.W, padx=(0, 15), pady=(0, 10))
        self.output_var = tk.StringVar(value=str(self.output_dir))
        self.output_entry = ttk.Entry(selection_frame, textvariable=self.output_var)
        self.output_entry.grid(row=4, column=1, sticky=(tk.W, tk.E), padx=(0, 15), pady=(0, 10))
        select_output_btn = ttk.Button(selection_frame, text="üìÅ Choisir", command=self.select_output_folder, width=15)
        select_output_btn.grid(row=4, column=2, pady=(0, 10))
        
        # Bouton √âditer les bulles (temporairement d√©sactiv√©)
        # if EDITEUR_BULLES_AVAILABLE:
        #     edit_bulles_btn = ttk.Button(selection_frame, text="‚úèÔ∏è √âditer les bulles", 
        #                                command=self.edit_bulles, width=15)
        #     edit_bulles_btn.grid(row=5, column=2, pady=(0, 10))
        
        # SECTION TRAITEMENT (fusionn√©e)
        processing_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è Traitement", padding="15")
        processing_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(0, 20))
        processing_frame.columnconfigure(0, weight=1)
        
        # Info utilisateur
        info_label = ttk.Label(processing_frame, text="S√©lectionnez une image OU un dossier, puis lancez le traitement :", font=('Arial', 9, 'italic'))
        info_label.grid(row=0, column=0, sticky=tk.W, pady=(0, 10))
        
        # Boutons d'action
        action_buttons_frame = ttk.Frame(processing_frame)
        action_buttons_frame.grid(row=1, column=0, sticky=(tk.W, tk.E))
        action_buttons_frame.columnconfigure(0, weight=1)
        action_buttons_frame.columnconfigure(1, weight=1)
        action_buttons_frame.columnconfigure(2, weight=1)
        
        # Bouton Pipeline Complet
        complete_btn = ttk.Button(action_buttons_frame, text="üîÑ Pipeline Complet", 
                                 command=self.run_batch_pipeline, width=20)
        complete_btn.grid(row=0, column=0, padx=(0, 10))
        
        # Bouton Nettoyage Seulement
        clean_btn = ttk.Button(action_buttons_frame, text="üßπ Nettoyage Seulement", 
                              command=lambda: self.run_batch_pipeline(clean_only=True), width=20)
        clean_btn.grid(row=0, column=1, padx=(0, 10))
        
        # Bouton Traduction Seulement
        translate_btn = ttk.Button(action_buttons_frame, text="üåê Traduction Seulement", 
                                 command=lambda: self.run_batch_pipeline(translate_only=True), width=20)
        translate_btn.grid(row=0, column=2, padx=(0, 10))

        # Boutons d'action suppl√©mentaires
        action_buttons_frame2 = ttk.Frame(processing_frame)
        action_buttons_frame2.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        action_buttons_frame2.columnconfigure(0, weight=1)
        
        # Bouton unique pour √©diter le texte (g√®re image unique et multi-images)
        edit_text_btn = ttk.Button(action_buttons_frame2, text="‚úèÔ∏è √âditer le texte",
                                      command=self.launch_text_editor, width=20)
        edit_text_btn.grid(row=0, column=0)
        
        # SECTION PROGRESSION (pour le mode batch)
        progress_frame = ttk.LabelFrame(main_frame, text="üìä Progression", padding="15")
        progress_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(0, 20))
        progress_frame.columnconfigure(0, weight=1)
        
        # Barre de progression
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, maximum=100, style="Green.Horizontal.TProgressbar")
        self.progress_bar.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Informations de progression
        progress_info_frame = ttk.Frame(progress_frame)
        progress_info_frame.grid(row=1, column=0, sticky=(tk.W, tk.E))
        progress_info_frame.columnconfigure(1, weight=1)
        progress_info_frame.columnconfigure(3, weight=1)
        
        ttk.Label(progress_info_frame, text="Image actuelle:").grid(row=0, column=0, sticky=tk.W)
        self.current_image_var = tk.StringVar(value="Aucune")
        ttk.Label(progress_info_frame, textvariable=self.current_image_var, 
                 font=('Arial', 9, 'italic')).grid(row=0, column=1, sticky=tk.W, padx=(5, 0))
        
        ttk.Label(progress_info_frame, text="Temps √©coul√©:").grid(row=0, column=2, sticky=tk.W, padx=(20, 0))
        self.elapsed_time_var = tk.StringVar(value="0m 0s")
        ttk.Label(progress_info_frame, textvariable=self.elapsed_time_var).grid(row=0, column=3, sticky=tk.W, padx=(5, 0))
        
        ttk.Label(progress_info_frame, text="Temps restant:").grid(row=1, column=0, sticky=tk.W, pady=(5, 0))
        self.remaining_time_var = tk.StringVar(value="Calcul...")
        ttk.Label(progress_info_frame, textvariable=self.remaining_time_var).grid(row=1, column=1, sticky=tk.W, pady=(5, 0), padx=(5, 0))
        
        ttk.Label(progress_info_frame, text="Statut:").grid(row=1, column=2, sticky=tk.W, pady=(5, 0), padx=(20, 0))
        self.status_var = tk.StringVar(value="Pr√™t")
        ttk.Label(progress_info_frame, textvariable=self.status_var, 
                 font=('Arial', 9, 'bold')).grid(row=1, column=3, sticky=tk.W, pady=(5, 0), padx=(5, 0))
        
        # Statistiques
        stats_frame = ttk.Frame(progress_frame)
        stats_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        
        ttk.Label(stats_frame, text="‚úÖ R√©ussites:").grid(row=0, column=0, sticky=tk.W)
        self.success_count_var = tk.StringVar(value="0")
        ttk.Label(stats_frame, textvariable=self.success_count_var, 
                 font=('Arial', 10, 'bold')).grid(row=0, column=1, sticky=tk.W, padx=(5, 0))
        
        ttk.Label(stats_frame, text="‚ùå √âchecs:").grid(row=0, column=2, sticky=tk.W, padx=(20, 0))
        self.failed_count_var = tk.StringVar(value="0")
        ttk.Label(stats_frame, textvariable=self.failed_count_var, 
                 font=('Arial', 10, 'bold')).grid(row=0, column=3, sticky=tk.W, padx=(5, 0))
        
        # Contr√¥les du traitement par lots
        batch_controls_frame = ttk.Frame(progress_frame)
        batch_controls_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        batch_controls_frame.columnconfigure(0, weight=1)
        batch_controls_frame.columnconfigure(1, weight=1)
        batch_controls_frame.columnconfigure(2, weight=1)
        batch_controls_frame.columnconfigure(3, weight=1)

        self.start_batch_button = tk.Button(batch_controls_frame, text="üöÄ D√©marrer",
                                            command=self.start_batch_processing, width=15,
                                            bg='#4caf50', fg='white', activebackground='#388e3c', activeforeground='white')
        self.start_batch_button.grid(row=0, column=0, padx=(0, 10))

        self.pause_batch_button = tk.Button(batch_controls_frame, text="‚è∏Ô∏è Pause",
                                            command=self.pause_batch_processing, width=15,
                                            bg='#ff9800', fg='white', activebackground='#f57c00', activeforeground='white', state=tk.DISABLED)
        self.pause_batch_button.grid(row=0, column=1, padx=(0, 10))

        self.stop_batch_button = tk.Button(batch_controls_frame, text="‚èπÔ∏è Arr√™ter",
                                           command=self.stop_batch_processing, width=15,
                                           bg='#f44336', fg='white', activebackground='#b71c1c', activeforeground='white', state=tk.DISABLED)
        self.stop_batch_button.grid(row=0, column=2, padx=(0, 10))

        # Nouvelle gestion des boutons batch
        def set_batch_buttons_state(running):
            if running:
                self.start_batch_button.config(state=tk.DISABLED)
                self.pause_batch_button.config(state=tk.NORMAL)
                self.stop_batch_button.config(state=tk.NORMAL)
            else:
                self.start_batch_button.config(state=tk.NORMAL)
                self.pause_batch_button.config(state=tk.DISABLED)
                self.stop_batch_button.config(state=tk.DISABLED)
        self.set_batch_buttons_state = set_batch_buttons_state

        # Remplacer les anciens enable/disable_batch_buttons par la nouvelle fonction
        self.enable_batch_buttons = lambda: self.set_batch_buttons_state(False)
        self.disable_batch_buttons = lambda: self.set_batch_buttons_state(True)
        
        # Section Logs
        log_frame = ttk.LabelFrame(main_frame, text="üìã Logs", padding="15")
        log_frame.grid(row=4, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(4, weight=1)
        
        # Zone de logs
        self.log_text = scrolledtext.ScrolledText(log_frame, height=12, width=80, font=('Consolas', 9))
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # Boutons de log centr√©s
        log_buttons_frame = ttk.Frame(log_frame)
        log_buttons_frame.grid(row=1, column=0, pady=(0, 0))
        log_buttons_frame.columnconfigure(0, weight=1)
        log_buttons_frame.columnconfigure(1, weight=1)
        log_buttons_frame.columnconfigure(2, weight=1)
        log_buttons_frame.columnconfigure(3, weight=1)
        
        clear_logs_btn = ttk.Button(log_buttons_frame, text="üóëÔ∏è Effacer logs", 
                                   command=self.clear_logs, width=15)
        clear_logs_btn.grid(row=0, column=0, padx=(0, 10))
        
        # Mettre √† jour l'affichage
        self.update_display()
    
    def setup_styles(self):
        style = ttk.Style()
        # Forcer le th√®me clam (plus compatible avec les couleurs personnalis√©es)
        style.theme_use('clam')
        # Style barre de progression verte
        style.configure("Green.Horizontal.TProgressbar", troughcolor='#e0e0e0', background='#4caf50', thickness=20)
        # Styles boutons color√©s
        style.configure("Green.TButton", foreground='white', background='#4caf50')
        style.map("Green.TButton",
                  background=[('active', '#388e3c'), ('disabled', '#a5d6a7')])
        style.configure("Orange.TButton", foreground='white', background='#ff9800')
        style.map("Orange.TButton",
                  background=[('active', '#f57c00'), ('disabled', '#ffe0b2')])
        style.configure("Red.TButton", foreground='white', background='#f44336')
        style.map("Red.TButton",
                  background=[('active', '#b71c1c'), ('disabled', '#ffcdd2')])

    def select_image(self):
        """Ouvre le dialogue de s√©lection d'image"""
        filetypes = [
            ("Images", "*.jpg *.jpeg *.png *.bmp *.tiff"),
            ("Tous les fichiers", "*.*")
        ]
        filename = filedialog.askopenfilename(
            title="S√©lectionner une image",
            filetypes=filetypes
        )
        if filename:
            self.current_image = Path(filename)
            self.current_folder = None
            self.image_var.set(str(self.current_image))
            self.folder_var.set("")
            self.log_message(f"‚úÖ Image s√©lectionn√©e: {self.current_image}")
            self.save_config()
    
    def select_folder(self):
        """Ouvre le dialogue de s√©lection de dossier"""
        folder = filedialog.askdirectory(title="S√©lectionner un dossier d'images")
        if folder:
            self.current_folder = Path(folder)
            self.current_image = None
            self.folder_var.set(str(self.current_folder))
            self.image_var.set("")
            self.log_message(f"‚úÖ Dossier s√©lectionn√©: {self.current_folder}")
            self.save_config()
    
    def select_output_folder(self):
        """Ouvre le dialogue de s√©lection du dossier de sortie"""
        folder = filedialog.askdirectory(title="S√©lectionner le dossier de sortie")
        if folder:
            self.output_dir = Path(folder)
            self.output_var.set(str(self.output_dir))
            self.log_message(f"‚úÖ Dossier de sortie: {self.output_dir}")
            self.save_config()
    
    def toggle_verbose(self):
        """Bascule le mode verbeux"""
        self.verbose = not self.verbose
        status = "activ√©" if self.verbose else "d√©sactiv√©"
        self.log_message(f"‚úÖ Mode verbeux {status}")
        
        # Mettre √† jour le texte du bouton
        if hasattr(self, 'verbose_btn'):
            verbose_status = "ON" if self.verbose else "OFF"
            self.verbose_btn.configure(text=f"üîç Verbeux: {verbose_status}")
        
        self.save_config()
    
    def update_display(self):
        """Met √† jour l'affichage des variables"""
        self.image_var.set(str(self.current_image) if self.current_image else "")
        self.folder_var.set(str(self.current_folder) if self.current_folder else "")
        self.output_var.set(str(self.output_dir))
        # self.verbose_var.set(self.verbose) # Removed as per edit hint
    
    def run_selected_pipeline(self, clean_only=False, translate_only=False):
        """Lance le pipeline selon le mode s√©lectionn√©"""
        if not self.current_image and not self.current_folder:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner une image ou un dossier avant de lancer le pipeline.")
            return
        
        # D√©sactiver les boutons pendant l'ex√©cution
        self.disable_buttons()
        
        # Lancer le pipeline dans un thread
        thread = threading.Thread(
            target=self._run_selected_pipeline_thread,
            args=(clean_only, translate_only),
            daemon=True
        )
        thread.start()
    
    def run_pipeline(self, clean_only=False, translate_only=False):
        """Lance le pipeline dans un thread s√©par√© (ancienne m√©thode)"""
        if not self.current_image and not self.current_folder:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner une image ou un dossier avant de lancer le pipeline.")
            return
        
        # D√©sactiver les boutons pendant l'ex√©cution
        self.disable_buttons()
        
        # Lancer le pipeline dans un thread
        thread = threading.Thread(
            target=self._run_pipeline_thread,
            args=(clean_only, translate_only),
            daemon=True
        )
        thread.start()
    
    def _run_selected_pipeline_thread(self, clean_only, translate_only):
        """Ex√©cute le pipeline selon le mode s√©lectionn√©"""
        try:
            # D√©tecter automatiquement le mode selon la s√©lection
            if self.current_folder and not self.current_image:
                # Mode dossier (multi-images) - utiliser le traitement par lots
                mode = "batch"
                self.log_message("üîÑ Mode d√©tect√© automatiquement: Traitement par lots (dossier s√©lectionn√©)")
            elif self.current_image and not self.current_folder:
                # Mode image unique - utiliser le traitement unique
                mode = "single"
                self.log_message("üéØ Mode d√©tect√© automatiquement: Traitement unique (image s√©lectionn√©e)")
            else:
                # Utiliser le mode s√©lectionn√© manuellement
                mode = getattr(self, 'processing_mode', tk.StringVar(value="single")).get()
                self.log_message(f"üéØ Mode s√©lectionn√© manuellement: {mode}")
            
            if mode == "single":
                # Mode traitement unique avec bulles modifi√©es
                self.log_message("üéØ Mode: Traitement unique (avec bulles modifi√©es)")
                self._run_pipeline_thread(clean_only, translate_only)
            else:
                # Mode traitement par lots
                self.log_message("üîÑ Mode: Traitement par lots")
                self._run_batch_processing(clean_only, translate_only)
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur dans le pipeline: {e}")
        finally:
            # R√©activer les boutons
            self.root.after(0, self.enable_buttons)
    
    def _run_batch_processing(self, clean_only, translate_only):
        """Lance le traitement par lots"""
        if not hasattr(self, 'batch_processor') or not self.batch_mode:
            self.log_message("Traitement par lots non disponible")
            return
        
        # Utiliser les param√®tres pass√©s directement (depuis les boutons)
        # Les param√®tres clean_only et translate_only viennent des boutons cliqu√©s
        # et ne d√©pendent plus du batch_mode
        
        # V√©rifier qu'on a des images √† traiter
        images_to_process = []
        if self.current_image:
            images_to_process.append(str(self.current_image))
            self.log_message(f"Image selectionnee: {self.current_image}")
        elif self.current_folder:
            image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff'}
            images = [str(p) for p in self.current_folder.iterdir() 
                     if p.suffix.lower() in image_extensions]
            images_to_process.extend(images)
            self.log_message(f"Dossier selectionne: {len(images)} images trouvees")
        
        if not images_to_process:
            self.log_message("Aucune image selectionnee pour le traitement par lots")
            return
        
        self.log_message(f"{len(images_to_process)} images a traiter")
        
        # Log du mode s√©lectionn√©
        mode_text = "Pipeline complet"
        if clean_only:
            mode_text = "Nettoyage seulement"
        elif translate_only:
            mode_text = "Traduction seulement"
        self.log_message(f"Mode selectionne: {mode_text}")
        
        # Ajouter les images au processeur
        self.batch_processor.add_images(images_to_process)
        
        # D√©marrer le traitement
        # Utiliser 1 thread pour une seule image, 4 threads pour un dossier
        if len(images_to_process) == 1:
            num_workers = 1
            self.log_message("üéØ Utilisation d'un seul thread (image unique)")
        else:
            num_workers = 4
            self.log_message("üîÑ Utilisation de 4 threads (traitement par lots)")
        
        self.batch_processor.start_processing(
            output_dir=str(self.output_dir),
            clean_only=clean_only,
            translate_only=translate_only,
            verbose=self.verbose,
            num_workers=num_workers
        )
        
        # Mettre √† jour l'interface
        self.disable_batch_buttons()
        self.log_message("Traitement par lots demarre")
    
    def _run_pipeline_thread(self, clean_only, translate_only):
        """Ex√©cute le pipeline dans un thread s√©par√©"""
        # Imports n√©cessaires pour le pipeline complet
        from scripts.clean_bubbles import predictor
        from scripts.translate_bubbles import extract_and_translate
        from scripts.reinsert_translations import draw_translated_text
        import cv2
        import numpy as np
        
        try:
            # V√©rifier si on a des bulles modifi√©es pour l'image actuelle
            edited_bulles = getattr(self, 'edited_bulles', None)
            has_edited_bulles = edited_bulles is not None and len(edited_bulles) > 0
            self.log_message(f"üîç V√©rification des bulles modifi√©es:")
            self.log_message(f"   - hasattr(self, 'edited_bulles'): {hasattr(self, 'edited_bulles')}")
            self.log_message(f"   - self.edited_bulles: {edited_bulles}")
            self.log_message(f"   - len(self.edited_bulles): {len(edited_bulles) if edited_bulles else 0}")
            self.log_message(f"   - has_edited_bulles: {has_edited_bulles}")
            
            if has_edited_bulles:
                self.log_message(f"üîß Utilisation de {len(edited_bulles)} bulle(s) modifi√©e(s) pour le pipeline")
                
                if self.current_image:
                    self.log_message(f"üöÄ Lancement du pipeline avec bulles modifi√©es sur: {self.current_image}")
                    
                    if translate_only and not clean_only:
                        # Mode "Traduction seulement" : pas de nettoyage, juste traduction
                        self.log_message("üåê Mode traduction seulement - pas de nettoyage")
                        from scripts.main_pipeline import run_pipeline
                        run_pipeline(str(self.current_image), str(self.output_dir), clean_only=False, translate_only=True)
                    else:
                        # Mode avec nettoyage (Pipeline complet ou Nettoyage seulement)
                        cleaned_image = self.clean_bubbles_with_edited_data(self.current_image, edited_bulles)
                        
                        if cleaned_image is not None:
                            # Sauvegarder l'image nettoy√©e
                            output_path = Path(self.output_dir) / f"cleaned_{Path(self.current_image).name}"
                            output_path.parent.mkdir(parents=True, exist_ok=True)
                            
                            success = cv2.imwrite(str(output_path), cleaned_image)
                            if success:
                                self.log_message(f"‚úÖ Image nettoy√©e avec bulles modifi√©es: {output_path}")
                                
                                if not clean_only:
                                    # Continuer avec traduction et r√©insertion si n√©cessaire
                                    self.log_message("üîÑ Passage √† la traduction et r√©insertion...")
                                    # Pour le pipeline complet avec bulles modifi√©es, on doit :
                                    # 1. Utiliser l'image originale pour la d√©tection
                                    # 2. Mais remplacer les bulles d√©tect√©es par nos bulles modifi√©es
                                    # 3. Puis faire la traduction et r√©insertion
                                    
                                    # D√©tecter les bulles dans l'image originale
                                    self.log_message("üîç D√©tection des bulles pour traduction...")
                                    image = cv2.imread(str(self.current_image))
                                    instances = predictor(image)
                                    
                                    if instances is not None and len(instances) > 0:
                                        # Remplacer les bulles d√©tect√©es par nos bulles modifi√©es
                                        self.log_message(f"üîß Remplacement par {len(edited_bulles)} bulle(s) modifi√©e(s)")
                                        
                                        # Cr√©er les dossiers de sortie
                                        output_dir = Path(self.output_dir)
                                        translations_dir = output_dir / "translations"
                                        final_dir = output_dir / "final"
                                        translations_dir.mkdir(parents=True, exist_ok=True)
                                        final_dir.mkdir(parents=True, exist_ok=True)
                                        
                                        # Extraire et traduire avec les bulles modifi√©es
                                        self.log_message("üåê Extraction et traduction du texte...")
                                        from scripts.translate_bubbles import extract_and_translate_with_edited_bulles
                                        results = extract_and_translate_with_edited_bulles(str(self.current_image), edited_bulles)
                                        
                                        if results:
                                            # Sauvegarder les traductions
                                            base_name = Path(self.current_image).stem
                                            txt_path = translations_dir / f"{base_name}.txt"
                                            json_path = translations_dir / f"{base_name}.json"
                                            
                                            with open(txt_path, 'w', encoding='utf-8') as f:
                                                for r in results:
                                                    f.write(f"[{r['index']}] {r['class']} ({r['confidence']*100:.1f}%)\n")
                                                    f.write(f"Anglais   : {r['ocr_text']}\n")
                                                    f.write(f"Fran√ßais  : {r['translated_text']}\n\n")
                                            
                                            import json
                                            with open(json_path, 'w', encoding='utf-8') as f:
                                                json.dump(results, f, ensure_ascii=False, indent=2)
                                            
                                            self.log_message(f"‚úÖ Traductions sauvegard√©es: {txt_path}, {json_path}")
                                            
                                            # R√©ins√©rer le texte traduit
                                            self.log_message("üîÑ R√©insertion du texte traduit...")
                                            final_path = final_dir / f"{base_name}_translated.png"
                                            draw_translated_text(str(output_path), str(json_path), str(final_path))
                                            
                                            self.log_message(f"‚úÖ Image finale: {final_path}")
                                            self.log_message("‚úÖ Pipeline complet termin√© avec succ√®s!")
                                        else:
                                            self.log_message("‚ùå Aucune traduction g√©n√©r√©e")
                                    else:
                                        self.log_message("‚ùå Aucune bulle d√©tect√©e pour la traduction")
                            else:
                                self.log_message(f"‚ùå √âchec de la sauvegarde: {output_path}")
                        else:
                            self.log_message(f"‚ùå √âchec du nettoyage avec les bulles modifi√©es")
                            # Fallback vers le pipeline normal
                            from scripts.main_pipeline import run_pipeline
                            run_pipeline(str(self.current_image), str(self.output_dir), clean_only, translate_only)
                else:
                    # Pour les dossiers, on ne peut pas utiliser les bulles modifi√©es
                    self.log_message("‚ö†Ô∏è Les bulles modifi√©es ne sont disponibles que pour une image unique")
                    self._run_pipeline_normal(clean_only, translate_only)
            else:
                # Utiliser le pipeline normal
                self.log_message("üîÑ Utilisation du pipeline normal (pas de bulles modifi√©es)")
                self._run_pipeline_normal(clean_only, translate_only)
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur dans le pipeline: {e}")
        finally:
            # R√©activer les boutons
            self.root.after(0, self.enable_buttons)
    
    def _run_pipeline_normal(self, clean_only, translate_only):
        """Ex√©cute le pipeline normal sans bulles modifi√©es"""
        from scripts.main_pipeline import run_pipeline
        
        if self.current_image:
            self.log_message(f"üöÄ Lancement du pipeline normal sur: {self.current_image}")
            run_pipeline(str(self.current_image), str(self.output_dir), clean_only, translate_only)
        elif self.current_folder:
            self.log_message(f"üöÄ Lancement du pipeline normal sur le dossier: {self.current_folder}")
            image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff'}
            images = [p for p in self.current_folder.iterdir() 
                     if p.suffix.lower() in image_extensions]
            
            if not images:
                self.log_message("‚ùå Aucun fichier image trouv√© dans ce dossier")
                return
            
            for i, img in enumerate(images, 1):
                self.log_message(f"‚û°Ô∏è Traitement de {img} ({i}/{len(images)})")
                run_pipeline(str(img), str(self.output_dir), clean_only, translate_only)
            
            self.log_message("‚úÖ Traitement du dossier termin√©")
    
    def disable_buttons(self):
        """D√©sactive les boutons pendant l'ex√©cution"""
        for widget in self.root.winfo_children():
            if isinstance(widget, ttk.Button):
                widget.configure(state='disabled')
    
    def enable_buttons(self):
        """R√©active les boutons apr√®s l'ex√©cution"""
        for widget in self.root.winfo_children():
            if isinstance(widget, ttk.Button):
                widget.configure(state='normal')
    
    def log_message(self, message):
        """Ajoute un message √† la queue de logs"""
        timestamp = time.strftime("%H:%M:%S")
        self.log_queue.put(f"[{timestamp}] {message}")
    
    def start_log_thread(self):
        """D√©marre le thread de traitement des logs"""
        def process_logs():
            while True:
                try:
                    message = self.log_queue.get(timeout=0.1)
                    self.root.after(0, self._add_log_message, message)
                except queue.Empty:
                    continue
        
        thread = threading.Thread(target=process_logs, daemon=True)
        thread.start()
    
    def _add_log_message(self, message):
        """Ajoute un message aux logs (appel√© depuis le thread principal)"""
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)
    
    def clear_logs(self):
        """Efface les logs"""
        self.log_text.delete(1.0, tk.END)
        self.log_message("üóëÔ∏è Logs effac√©s")
    
    def save_logs(self):
        """Sauvegarde les logs dans un fichier"""
        filename = filedialog.asksaveasfilename(
            title="Sauvegarder les logs",
            defaultextension=".txt",
            filetypes=[("Texte", "*.txt"), ("Tous les fichiers", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.log_text.get(1.0, tk.END))
                self.log_message(f"‚úÖ Logs sauvegard√©s: {filename}")
            except Exception as e:
                self.log_message(f"‚ùå Erreur lors de la sauvegarde des logs: {e}")
    
    # M√©thodes pour le traitement par lots
    def update_batch_progress(self, progress_info):
        """Met √† jour la progression du traitement par lots"""
        # Utiliser after() pour ex√©cuter dans le thread principal
        self.root.after(0, self._update_batch_progress_ui, progress_info)
    
    def _update_batch_progress_ui(self, progress_info):
        """Met √† jour l'interface de progression (appel√© dans le thread principal)"""
        try:
            if hasattr(self, 'progress_var'):
                self.progress_var.set(progress_info['progress'])
            
            if hasattr(self, 'current_image_var'):
                current_image = progress_info.get('current_image', 'Aucune')
                if current_image:
                    current_image = os.path.basename(current_image)
                self.current_image_var.set(current_image)
            
            if hasattr(self, 'elapsed_time_var'):
                elapsed = progress_info.get('elapsed_time', 0)
                elapsed_str = f"{int(elapsed//60)}m {int(elapsed%60)}s"
                self.elapsed_time_var.set(elapsed_str)
            
            if hasattr(self, 'remaining_time_var'):
                remaining = progress_info.get('estimated_remaining', 0)
                if remaining > 0:
                    remaining_str = f"{int(remaining//60)}m {int(remaining%60)}s"
                else:
                    remaining_str = "Calcul..."
                self.remaining_time_var.set(remaining_str)
            
            if hasattr(self, 'success_count_var'):
                processed = progress_info.get('processed', 0)
                failed = progress_info.get('failed', 0)
                self.success_count_var.set(str(processed - failed))
            
            if hasattr(self, 'failed_count_var'):
                failed = progress_info.get('failed', 0)
                self.failed_count_var.set(str(failed))
        except Exception as e:
            self.log_message(f"Erreur lors de la mise √† jour de la progression: {e}")
    
    def update_batch_status(self, status):
        """Met √† jour le statut du traitement par lots"""
        # Utiliser after() pour ex√©cuter dans le thread principal
        self.root.after(0, self._update_batch_status_ui, status)
    
    def _update_batch_status_ui(self, status):
        """Met √† jour l'interface de statut (appel√© dans le thread principal)"""
        try:
            if hasattr(self, 'status_var'):
                self.status_var.set(status)
            
            # V√©rifier si le traitement est termin√©
            if hasattr(self, 'batch_processor') and not self.batch_processor.is_processing():
                self.enable_batch_buttons()
        except Exception as e:
            self.log_message(f"Erreur lors de la mise √† jour du statut: {e}")
    
    def handle_batch_error(self, image_path, error):
        """G√®re les erreurs du traitement par lots"""
        # Utiliser after() pour ex√©cuter dans le thread principal
        self.root.after(0, self._handle_batch_error_ui, image_path, error)
    
    def _handle_batch_error_ui(self, image_path, error):
        """G√®re les erreurs dans le thread principal"""
        try:
            image_name = os.path.basename(image_path) if image_path else "Image inconnue"
            error_msg = f"Erreur lors du traitement de {image_name}: {error}"
            self.log_message(f"ERREUR: {error_msg}")
        except Exception as e:
            self.log_message(f"Erreur lors de la gestion d'erreur: {e}")
    
    def enable_batch_buttons(self):
        """Active les boutons du traitement par lots"""
        if hasattr(self, 'start_batch_button'):
            self.start_batch_button.configure(state='normal')
        if hasattr(self, 'pause_batch_button'):
            self.pause_batch_button.configure(state='disabled', text="Pause")
        if hasattr(self, 'stop_batch_button'):
            self.stop_batch_button.configure(state='disabled')
    
    def disable_batch_buttons(self):
        """D√©sactive les boutons du traitement par lots"""
        if hasattr(self, 'start_batch_button'):
            self.start_batch_button.configure(state='disabled')
        if hasattr(self, 'pause_batch_button'):
            self.pause_batch_button.configure(state='normal')
        if hasattr(self, 'stop_batch_button'):
            self.stop_batch_button.configure(state='normal')
    
    # M√©thodes pour le traitement par lots
    def start_batch_processing(self):
        """D√©marre le traitement par lots"""
        self.log_message("Tentative de demarrage du traitement par lots...")
        
        if not self.current_folder:
            messagebox.showwarning("Attention", "Veuillez d'abord s√©lectionner un dossier d'images.")
            return
        
        if not self.output_dir:
            messagebox.showwarning("Attention", "Veuillez d'abord s√©lectionner un dossier de sortie.")
            return
        
        # Lancer le traitement par lots
        self.log_message("üîÑ Mode: Traitement par lots")
        self.log_message(f"Dossier s√©lectionn√©: {len(self.get_image_files_from_folder(self.current_folder))} images trouv√©es")
        
        try:
            from scripts.batch_processor import process_folder
            process_folder(str(self.current_folder), str(self.output_dir))
            self.log_message("‚úÖ Traitement par lots termin√©")
        except Exception as e:
            self.log_message(f"‚ùå Erreur lors du traitement par lots: {e}")
            messagebox.showerror("Erreur", f"Erreur lors du traitement par lots: {e}")
    
    def pause_batch_processing(self):
        """Met en pause le traitement par lots"""
        if not hasattr(self, 'batch_processor') or not self.batch_mode:
            return
        
        if self.batch_processor.is_processing():
            if self.batch_processor.is_paused_state():
                self.batch_processor.resume_processing()
                self.pause_batch_button.configure(text="‚è∏Ô∏è Pause")
                self.log_message("‚ñ∂Ô∏è Traitement par lots repris")
            else:
                self.batch_processor.pause_processing()
                self.pause_batch_button.configure(text="‚ñ∂Ô∏è Reprendre")
                self.log_message("‚è∏Ô∏è Traitement par lots mis en pause")
    
    def stop_batch_processing(self):
        """Arr√™te le traitement par lots"""
        if not hasattr(self, 'batch_processor') or not self.batch_mode:
            return
        
        if self.batch_processor.is_processing():
            self.batch_processor.stop_processing()
            self.log_message("‚èπÔ∏è Arr√™t du traitement par lots demand√©")

    # def edit_bulles(self):
    #     """Ouvre l'√©diteur de bulles pour modifier les d√©tections (temporairement d√©sactiv√©)"""
    #     pass

    # def _handle_editor_result(self, result, success):
    #     """G√®re le r√©sultat de l'√©diteur de mani√®re thread-safe (temporairement d√©sactiv√©)"""
    #     pass

    # def _handle_editor_error(self, error_msg):
    #     """G√®re les erreurs de l'√©diteur de mani√®re thread-safe (temporairement d√©sactiv√©)"""
    #     pass

    # def clean_bubbles_with_edited_data(self, image_path, edited_bulles):
    #     """Nettoie les bulles en utilisant les donn√©es modifi√©es de l'√©diteur (temporairement d√©sactiv√©)"""
    #     pass
    
    def run_batch_pipeline(self, clean_only=False, translate_only=False):
        """Lance le pipeline sur un fichier ou un dossier (toujours mode batch)"""
        chemin = self.current_image or self.current_folder
        if not chemin:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner une image ou un dossier avant de lancer le traitement.")
            return
        # Si c'est un fichier, on cr√©e une liste avec un seul √©l√©ment
        if os.path.isfile(chemin):
            images = [chemin]
        elif os.path.isdir(chemin):
            images = self.get_image_files_from_folder(chemin)
            if not images:
                messagebox.showwarning("Attention", "Aucune image trouv√©e dans le dossier s√©lectionn√©.")
                return
        else:
            messagebox.showwarning("Attention", "S√©lection invalide.")
            return
        # D√©sactiver les boutons pendant l'ex√©cution
        self.disable_buttons()
        # Lancer le pipeline dans un thread
        thread = threading.Thread(
            target=self._run_batch_pipeline_thread,
            args=(images, clean_only, translate_only),
            daemon=True
        )
        thread.start()

    def _run_batch_pipeline_thread(self, images, clean_only, translate_only):
        """Ex√©cute le pipeline sur la liste d'images (toujours mode batch)"""
        from scripts.main_pipeline import run_pipeline
        start_time = time.time()
        try:
            total = len(images)
            for i, image_path in enumerate(images, 1):
                self.log_message(f"‚û°Ô∏è Traitement de {image_path} ({i}/{total})")
                run_pipeline(str(image_path), str(self.output_dir), clean_only, translate_only)
                progress_info = {
                    'progress': int(i * 100 / total),
                    'current_image': str(image_path),
                    'elapsed_time': time.time() - start_time
                }
                self.update_batch_progress(progress_info)
            self.log_message("‚úÖ Traitement termin√© pour toutes les images.")
        except Exception as e:
            self.log_message(f"‚ùå Erreur lors du traitement : {e}")
        finally:
            self.enable_buttons()
    
    def launch_text_editor(self):
        """Lance l'√©diteur de texte (d√©tecte automatiquement le mode)"""
        try:
            # D√©tecter le mode : image unique ou dossier
            if self.current_image and not self.current_folder:
                # Mode image unique
                self.log_message(f"üöÄ Lancement de l'√©diteur (mode image unique)...")
                self.log_message(f"üìÅ Image: {self.current_image}")
                
                # Chercher l'image nettoy√©e
                image_name = os.path.basename(self.current_image)
                base_name = os.path.splitext(image_name)[0]
                
                # Chercher l'image nettoy√©e dans le dossier de sortie
                cleaned_image_path = None
                
                # Essayer plusieurs strat√©gies pour trouver l'image nettoy√©e
                search_strategies = [
                    # Strat√©gie 1: Chercher dans le dossier de sortie configur√©
                    lambda: self.output_dir,
                    # Strat√©gie 2: Chercher dans le dossier parent de l'image originale
                    lambda: Path(self.current_image).parent.parent / "images_cleaned" if "Pictures" in str(self.current_image) else None,
                    # Strat√©gie 3: Chercher dans le dossier de l'image originale
                    lambda: Path(self.current_image).parent,
                    # Strat√©gie 4: Chercher dans le dossier de travail actuel
                    lambda: Path.cwd() / "output"
                ]
                
                for strategy in search_strategies:
                    search_dir = strategy()
                    if search_dir and search_dir.exists():
                        self.log_message(f"üîç Recherche dans: {search_dir}")
                        
                        # Essayer plusieurs chemins possibles avec diff√©rentes extensions
                        possible_paths = [
                            # Chemins directs dans le dossier de sortie
                            search_dir / f"cleaned_{base_name}.png",
                            search_dir / f"cleaned_{base_name}.jpg",
                            search_dir / f"cleaned_{base_name}.jpeg",
                            # Chemins dans le sous-dossier cleaned
                            search_dir / "cleaned" / f"cleaned_{base_name}.png",
                            search_dir / "cleaned" / f"cleaned_{base_name}.jpg",
                            search_dir / "cleaned" / f"cleaned_{base_name}.jpeg",
                            # Essayer aussi avec le nom complet du fichier original
                            search_dir / f"cleaned_{image_name}",
                            search_dir / "cleaned" / f"cleaned_{image_name}",
                            # Essayer avec diff√©rentes variations du nom
                            search_dir / f"cleaned_{base_name}_cleaned.png",
                            search_dir / f"cleaned_{base_name}_cleaned.jpg",
                            search_dir / "cleaned" / f"cleaned_{base_name}_cleaned.png",
                            search_dir / "cleaned" / f"cleaned_{base_name}_cleaned.jpg",
                            # Essayer avec le nom exact du fichier original (sans extension)
                            search_dir / f"cleaned_{os.path.splitext(image_name)[0]}.png",
                            search_dir / f"cleaned_{os.path.splitext(image_name)[0]}.jpg",
                            search_dir / "cleaned" / f"cleaned_{os.path.splitext(image_name)[0]}.png",
                            search_dir / "cleaned" / f"cleaned_{os.path.splitext(image_name)[0]}.jpg"
                        ]
                        
                        for path in possible_paths:
                            if path.exists():
                                cleaned_image_path = path
                                self.log_message(f"‚úÖ Image nettoy√©e trouv√©e: {path}")
                                break
                        
                        if cleaned_image_path:
                            break
                
                if not cleaned_image_path:
                    # Si pas d'image nettoy√©e, utiliser l'image originale
                    self.log_message("‚ö†Ô∏è Image nettoy√©e non trouv√©e, utilisation de l'image originale")
                    cleaned_image_path = self.current_image
                
                # Chemins pour les fichiers JSON et sortie
                json_path = self.output_dir / "translations" / f"{base_name}.json"
                output_path = self.output_dir / "final" / f"{base_name}_translated.png"
                
                # Lancer l'√©diteur en mode image unique
                from scripts.text_editor_realtime import launch_realtime_text_editor
                launch_realtime_text_editor(str(cleaned_image_path), str(json_path), str(output_path))
                self.log_message("‚úÖ √âditeur ferm√©")
                
            elif self.current_folder and not self.current_image:
                # Mode dossier (multi-images)
                self.log_message(f"üöÄ Lancement de l'√©diteur (mode multi-images)...")
                self.log_message(f"üìÅ Dossier: {self.current_folder}")
                self.log_message(f"üìÅ Sortie: {self.output_dir}")
                
                # V√©rifier que le dossier de sortie existe
                if not self.output_dir.exists():
                    messagebox.showwarning("Attention", 
                        "Aucun dossier de sortie trouv√©. Veuillez d'abord ex√©cuter le pipeline de traitement.")
                    return
                
                # Lancer l'√©diteur en mode multi-images
                from scripts.text_editor_realtime import launch_multi_image_text_editor
                launch_multi_image_text_editor(str(self.current_folder), str(self.output_dir))
                self.log_message("‚úÖ √âditeur ferm√©")
                
            else:
                # Aucune s√©lection ou s√©lection multiple
                messagebox.showwarning("Attention", 
                    "Veuillez s√©lectionner soit une image unique, soit un dossier d'images.")
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur lors du lancement de l'√©diteur: {e}")
            messagebox.showerror("Erreur", f"Erreur lors du lancement de l'√©diteur: {e}")


def main():
    """Fonction principale"""
    try:
        root = TkinterDnD.Tk()
        app = BubbleCleanerGUI(root)
        # Gestion de la fermeture
        def on_closing():
            if messagebox.askokcancel("Quitter", "√ätes-vous s√ªr de vouloir quitter ?"):
                # Arr√™ter le thread de log si il existe
                if hasattr(app, 'log_thread') and app.log_thread.is_alive():
                    app.log_thread.join(timeout=1)
                root.destroy()
        root.protocol("WM_DELETE_WINDOW", on_closing)
        # Centrer la fen√™tre
        root.update_idletasks()
        width = root.winfo_width()
        height = root.winfo_height()
        x = (root.winfo_screenwidth() // 2) - (width // 2)
        y = (root.winfo_screenheight() // 2) - (height // 2)
        root.geometry(f"{width}x{height}+{x}+{y}")
        root.mainloop()
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement de l'interface: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 